import subprocess
import os
import sys
from datetime import datetime

def has_uncommitted_changes():
    try:
        changes = subprocess.check_output(
            ['git', 'status', '--porcelain'],
            stderr=subprocess.PIPE
        ).decode('ascii').strip()
        return bool(changes)
    except (subprocess.SubprocessError, OSError) as e:
        print(f"Error checking git status: {e}", file=sys.stderr)
        return False

def get_git_sha():
    try:
        if has_uncommitted_changes():
            return 'unchecked'
        sha = subprocess.check_output(
            ['git', 'rev-parse', '--short=7', 'HEAD'],
            stderr=subprocess.PIPE
        ).decode('ascii').strip()
        return sha
    except (subprocess.SubprocessError, OSError) as e:
        print(f"Error getting git SHA: {e}", file=sys.stderr)
        if os.path.exists('.git_sha'):
            try:
                with open('.git_sha', 'r') as f:
                    return f.read().strip()
            except Exception as e:
                print(f"Error reading .git_sha: {e}", file=sys.stderr)
        return 'unknown'

def generate_version_h(git_sha):
    now = datetime.now()
    build_date = now.strftime("%b %d %Y")
    build_time = now.strftime("%H:%M:%S")
    
    display_sha = 'built from unchecked-in code' if git_sha == 'unchecked' else git_sha
    
    content = f'''#ifndef VERSION_H
#define VERSION_H

#include <Arduino.h>

// Auto-generated by pre_build.py

// Git SHA information
const char* const GIT_SHA = "{git_sha}";
const char* const GIT_SHA_DISPLAY = "{display_sha}";

// Build timestamp
const char* const BUILD_DATE = "{build_date}";
const char* const BUILD_TIME = "{build_time}";

// For backward compatibility
#define BUILD_TIMESTAMP (String(BUILD_DATE) + " " + String(BUILD_TIME))

// Function to get the git SHA as a String
inline String getGitSha() {{
    return String(GIT_SHA_DISPLAY);
}}

#endif // VERSION_H
'''
    
    version_h_path = os.path.join('src', 'version.h')
    with open(version_h_path, 'w') as f:
        f.write(content)
    
    print(f"Generated {version_h_path} with SHA: {display_sha}")

def main():
    git_sha = get_git_sha()
    generate_version_h(git_sha)
    
    try:
        with open('.git_sha', 'w') as f:
            f.write(git_sha)
    except Exception as e:
        print(f"Error writing .git_sha: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
