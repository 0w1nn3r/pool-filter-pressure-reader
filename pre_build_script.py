#!/usr/bin/env python3
"""
Pre-build script for PlatformIO to generate version.h with git SHA and build timestamp.
"""
import subprocess
import os
import sys
from datetime import datetime

def run_command(cmd, cwd=None):
    """Run a shell command and return its output."""
    try:
        result = subprocess.run(
            cmd,
            cwd=cwd or os.getcwd(),
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {' '.join(cmd)}", file=sys.stderr)
        print(f"Error: {e}", file=sys.stderr)
        print(f"Output: {e.output}", file=sys.stderr)
        print(f"Stderr: {e.stderr}", file=sys.stderr)
        return None

def has_uncommitted_changes():
    """Check if there are uncommitted changes in the git repository."""
    output = run_command(['git', 'status', '--porcelain'])
    return bool(output) if output is not None else False

def get_git_sha():
    """Get the git SHA of the current commit."""
    if has_uncommitted_changes():
        return 'unchecked'
    
    sha = run_command(['git', 'rev-parse', '--short=7', 'HEAD'])
    if sha:
        return sha
        
    # Fallback to .git_sha file if git command fails
    git_sha_file = os.path.join(os.path.dirname(__file__), '.git_sha')
    if os.path.exists(git_sha_file):
        try:
            with open(git_sha_file, 'r') as f:
                return f.read().strip()
        except Exception as e:
            print(f"Error reading {git_sha_file}: {e}", file=sys.stderr)
    
    return 'unknown'

def generate_version_h(git_sha):
    # Get current date and time
    now = datetime.now()
    build_date = now.strftime("%b %d %Y")
    build_time = now.strftime("%H:%M:%S")
    
    # Determine what to display
    if git_sha == 'unchecked':
        display_sha = 'built from unchecked-in code'
    elif git_sha == 'unknown':
        display_sha = 'unknown (not a git repository)'
    else:
        display_sha = git_sha
    
    # Generate the version.h content
    content = """#ifndef VERSION_H
#define VERSION_H

#include <Arduino.h>

// Auto-generated by pre_build_script.py

// Git SHA information
const char* const GIT_SHA = "{git_sha}";
const char* const GIT_SHA_DISPLAY = "{display_sha}";

// Build timestamp
const char* const BUILD_DATE = "{build_date}";
const char* const BUILD_TIME = "{build_time}";

// For backward compatibility
#define BUILD_TIMESTAMP (String(BUILD_DATE) + " " + String(BUILD_TIME))

// Function to get the git SHA as a String
inline String getGitSha() {{
    return String(GIT_SHA_DISPLAY);
}}

#endif // VERSION_H""".format(
        git_sha=git_sha,
        display_sha=display_sha,
        build_date=build_date,
        build_time=build_time
    )
    
    # Ensure the src directory exists
    os.makedirs('src', exist_ok=True)
    
    # Write to version.h
    version_h_path = os.path.join('src', 'version.h')
    with open(version_h_path, 'w') as f:
        f.write(content)
    
    print(f"Generated {version_h_path} with SHA: {display_sha}")
    

def main():
    print("Running pre-build script...")
    git_sha = get_git_sha()
    generate_version_h(git_sha)

if __name__ == "__main__":
    main()
